/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.69")
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Support for IDEA project generation
    id 'idea'
}

// Serenity specific
apply plugin: 'net.serenity-bdd.aggregator'

// Tell Gradle that the test code is in the `main` module.
sourceSets {
    test {
        java {
            srcDirs += ['src/main/java']
        }
        resources {
            srcDirs += ['src/main/resources']
        }
    }
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// Housekeeping: Check for updated versions.
dependencies {
    // Runtime dependencies for the packaged version.
    runtime files('src/main/resources')

    // Logging for Serenity
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    // Test dependencies
    implementation 'junit:junit:4.12'
    implementation 'net.serenity-bdd:serenity-core:2.0.73'
    implementation 'net.serenity-bdd:serenity-junit:2.0.73'
    implementation 'net.serenity-bdd:serenity-cucumber:1.9.45'
    implementation 'net.serenity-bdd:serenity-rest-assured:2.0.73'
    implementation 'org.assertj:assertj-core:3.13.2'
    implementation 'org.json:json:20190722'
}

application {
    // Define the main class for the application, in this case a test runner.
    mainClassName = 'test_demo.TestRunner'
}

// Standard Serenity Gradle config.
// TO DO: investigate.
test {
    filter {
        includeTestsMatching "test_demo.TestSuite"
    }

    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

// Make sure the 'aggregate' tasks runs after the tests so the Serenity test report is generated
test.finalizedBy(aggregate)


// Don't stop on test failure, so that the Serenity report generation still happens
gradle.startParameter.continueOnFailure = true

// Make sure the bytecode runs on older JVMs
sourceCompatibility = 1.8
targetCompatibility = 1.8

description = "An demo of end-to-end of a website through the UI and network API"
version = "1.0.0"

/*
   Distribution configuration
 */
// Work around Windows being unable to handle long paths.
// See https://github.com/gradle/gradle/issues/1989
startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText
    }
}

// Copy the launcher files into the bin directory.
// These just set the platform specific webdriver paths.
applicationDistribution.from("src/main/launchers") {
    into "bin"
}
